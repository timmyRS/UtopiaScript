<?php
$flags = [
	"repl" => false,
	"stopwatch" => false,
	"time-limit" => 0,
	"debug" => false,
	"php-statement" => false,
	"help" => false
];
function switchArg(string $arg) : bool
{
	global $flags;
	switch($arg)
	{
		case "-i":
		case "repl":
		case "--repl":
		case "interactive":
		case "--interactive":
			$flags["repl"] = true;
			break;

		case "-t":
		case "--time":
		case "stopwatch":
		case "--stopwatch":
			$flags["stopwatch"] = true;
			break;

		case "-d":
		case "debug":
		case "--debug":
		case "--debug-mode":
			$flags["debug"] = true;
			break;

		case "-p":
		case "--enable-php-statement":
			$flags["php-statement"] = true;
			break;

		case "?":
		case "-?":
		case "help":
		case "--help":
			$flags["help"] = true;
			break;

		default:
			return false;
	}
	return true;
}
$file = "";
for($i = 1; $i < count($argv); $i++)
{
	$arg = strtolower($argv[$i]);
	if(substr($arg, 0, 1) == "-" && substr($arg, 0, 2) != "--")
	{
		$arr = str_split($arg);
		for($j = 1; $j < count($arr); $j++)
		{
			switchArg("-".$arr[$j]);
		}
	}
	else if(!switchArg($arg))
	{
		if(substr($arg, 0, 13) == "--time-limit=")
		{
			$flags["time-limit"] = floatval(substr($arg, 13));
		}
		else
		{
			$file = $arg;
		}
	}
}
if($flags["help"] || (!$file && !$flags["repl"]))
{
	die("Syntax: utopia [file] [-i|--repl|--interactive] [-d|--debug] [-t|--stopwatch] [--time-limit=<seconds>] [-p|--enable-php-statement]\r\nEither --repl or [file] has to be given.\r\n");
}
if(!is_file(__DIR__."/vendor/autoload.php"))
{
	echo "vendor/autoload.php was not found, attempting to generate it...\n";
	passthru("composer dump-autoload -o -d \"".__DIR__."\"");
	if(!is_file(__DIR__."/vendor/autoload.php"))
	{
		die("Welp, that didn't work. Try again as root/administrator.\n");
	}
}
require __DIR__."/vendor/autoload.php";
use UtopiaScript\
{Exception\Exception, Exception\IncompleteCodeException, Statement\ExitStatement, Utopia};
$utopia = new Utopia(fopen("php://stdin", "r"));
$utopia->debug = $flags["debug"];
$utopia->maximum_execution_time = $flags["time-limit"];
$utopia->loadExtension(UtopiaScriptDebugExtension\DebugExtension::class);
if($flags["php-statement"])
{
	$utopia->loadExtension(UtopiaScriptPhpStatementExtension\PhpStatementExtension::class);
}
if($flags["repl"])
{
	$code = "";
	$local_vars = [];
	$utopia->error_output = "echo";
	echo "UtopiaScript REPL (Read-eval-print loop)".($flags["debug"] ? " [Debug Mode]" : "")."\r\n";
	if($file)
	{
		echo "Note: [file] is not compatible REPL.\r\n";
	}
	echo "> ";
	do
	{
		$input = rtrim(fgets($utopia->input_stream), "\r\n");
		if($code != "")
		{
			$code .= "\r\n";
		}
		$code .= $input;
		try
		{
			ob_start(function ($buffer)
			{
				if($buffer)
				{
					$buffer = "< ".$buffer;
					if(substr($buffer, -1) != "\n")
					{
						$buffer .= "\r\n";
					}
				}
				return $buffer;
			});
			$ret = $utopia->parseAndExecuteWithWritableLocalVars($code, $local_vars);
			ob_end_flush();
			echo "= ".Utopia::strval($ret)."\r\n";
			$code = "";
		}
		catch(IncompleteCodeException $e)
		{
			ob_end_flush();
			if(in_array(trim($input), ['', ';']))
			{
				$code = "";
				echo get_class($e).": ".$e->getMessage()."\r\n";
			}
			else
			{
				echo '>';
			}
		}
		catch(Exception $e)
		{
			ob_end_flush();
			echo get_class($e).': '.$e->getMessage()."\r\n";
			$code = "";
		}
		if($flags["stopwatch"])
		{
			echo "Parsed and executed in ".($utopia->last_execution_time)." seconds.\r\n";
		}
		echo '> ';
	}
	while(true);
}
else
{
	try
	{
		$utopia->parseAndExecute(file_get_contents($file));
		if($flags["stopwatch"])
		{
			echo "\r\nParsed and executed in ".($utopia->last_execution_time)." seconds.\r\n";
		}
	}
	catch(Exception $e)
	{
		echo get_class($e).': '.$e->getMessage()."\r\n";
		if($flags["debug"])
		{
			echo $e->getTraceAsString()."\r\n";
		}
	}
}
